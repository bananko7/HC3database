MongoDB and NoSQL movement . What is broken with SQL based databases , and what problem does Mongo and friends solve ? Explain like I'm five.<>Design - wise , sometimes tables are n't always the best tool for the job . For instance , say you have a user profile which is storing all of a person 's favorite things . Unless your user profile is * only * storing their favorite things , you 're going to need multiple tables to store user data : Favorites : [ i d ] [ movie ] [ food ] [ book ] [ tv show ] Metadata : [ i d ] [ last login ] [ location at 5:24 this morning ] [ lat \/ long of last blowjob ] Posts [ i d ] [ post - id ] And so forth . With a NoSQL system , you can organize things the way humans actually think . Here 's an example of how I would organize that same information : user.[id].favorites { map of favorite things } user.[id].metadata { map of metadata } user.[id].posts [ [ set of post - ids ] ] It 's a much more intuitive way of organizing information , and allows for an extra dimension that is harder to visualize with 2 - D tables . This also makes it easier to pull in an entire block of all user data as one packet in a pipeline , instead of having run to queries against multiple tables , and the data is already organized in a way which can be easily \" sent \" ( via JSON , or whatever , for instance ) . You also do n't necessarily have to deal with data types as much . For instance in Redis , everything is stored as a string . This does mean , of course , that the database ca n't necessarily take care of your logic for you : ` select ( select age from user where i d = 100 ) * 7 ` ( full disclosure : I have n't used a SQL system in years , so this is probably incorrect syntax ) . With NoSQL , a lot more onus is in the actual program querying the data . There are of course inherent pitfalls with NoSQL systems : by not being restricted to tables , it 's really easy to have really sloppy data ( it 's easy to create \" shortcuts \" because you forgot about that one dimension of data you needed , and this creates a snowball effect which becomes a giant clusterfuck ) . Many people do n't realize that you still need to create a schema , even if it 's not enforced by the database itself , it needs to be easiy reflected in the programming and documentation . Without data type checking happening on the DB side , it has to be done in the programming , or else junk data can become widespread as data wo n't necessarily be rejected by the database , causing a write exception -- it will just fester inside until one day you realize you 've been fucked . That said , there are benefits of course to using NoSQL systems also . Adding new dimensions to data is trivial , or adding another level of hierarchy to information . If you now want to store a user 's favorite restaurant , you just add a new key to that map , you do n't have to edit an entire table . If you now want to add a new section to the site where a user can track every meal they 've ever eaten , you do n't have to edit any fundamental database , you just have to write to the new keys in your design ` user.[id].meals [ [ set of meal ids ] ] - > user.[id].meals.[meal - id ] { map of meal attributes } ` . There is often less overhead associated with NoSQL stuff too , since the database itself is n't doing much checking , and it 's elastic in so far as when you add a new user , you are only reserving space for them in memory or on disk as it 's needed , rather than setting them up with rows on every table which takes up space immediately to be filled in later . While this makes the overall footprint smaller , it has potential scaling problems , as it 's more difficult to know * when * and * how * you 'll need to scale . In a strictly typed SQL system , you know exactly how many bytes will be reserved for a user upon creation and can work with that accordingly ; you do not have that control in a NoSQL system . Just like with any piece of technology , choosing one over the other has costs and benefits , and sometimes one is a better tool than the other .<>MongoDB is a type of database called a \"NoSQL\" database. \"SQL\" stands for \"Structured Query Language\" and it is a programming language used to communicate with databases. Databases are like really organized lists or tables that hold lots of information. They can be used to store things like customer names, addresses, and phone numbers for a business. SQL databases are really good at storing and organizing lots of information in a very structured way. But sometimes, the structure of the information that needs to be stored doesn't fit neatly into a table. This is where NoSQL databases like MongoDB come in. NoSQL databases are a little bit different from SQL databases. They are better at storing unstructured or semistructured data, which is data that doesn't have a clear set of rules for how it should be organized. NoSQL databases are also usually better at handling very large amounts of data or lots of users accessing the database at the same time. So, MongoDB and other NoSQL databases are a good choice when you have a lot of information that doesn't fit neatly into a table, or when you need a database that can handle a lot of users or a lot of data.<>MongoDB is a type of database called a \"NoSQL\" database. \"SQL\" stands for \"Structured Query Language\" and it is a programming language used to communicate with databases. Databases are like really organized lists or tables that hold lots of information. They can be used to store things like customer names, addresses, and phone numbers for a business. SQL databases are really good at storing and organizing lots of information in a very structured way. But sometimes, the structure of the information that needs to be stored doesn't fit neatly into a table. This is where NoSQL databases like MongoDB come in. NoSQL databases are a little bit different from SQL databases. They are better at storing unstructured or semistructured data, which is data that doesn't have a clear set of rules for how it should be organized. NoSQL databases are also usually better at handling very large amounts of data or lots of users accessing the database at the same time. So, MongoDB and other NoSQL databases are a good choice when you have a lot of information that doesn't fit neatly into a table, or when you need a database that can handle a lot of users or a lot of data.<>reddit_eli5
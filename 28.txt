In video games , why is it so difficult for developers to make it so objects do not pass through one another ? For example , in Ghost Recon : Wildlands my character 's weapon passes through his tactical vest when in reality it should be in front . Explain like I'm five. 
Imagine that you 're in charge of creating the world around you . You have a pen that can draw anything in that space , and you have a rule book that creates all of the rules for that world . Let 's say that you really want to see a sword fight in your world , so you draw two swords . After you 're done drawing , you realize that they 're just floating there , so you create a rule to have them swing at each other . So these swords start swinging , but you see that they just pass through each other . They do n't stop and bounce off each other because your rulebook only says to swing , it says nothing about bouncing off of each other when they touch . So you have to create a rule that says that if the two swords touch , they have to stop their movement and bounce off each other . First you have to create a rule that determines what touching means . Then you create a rule about how to tell if the two things are touching . Then you create a rule about what to do when those two things touch . Not content with your clashing swords , you decide that you need create a much more elaborate fight . So you draw a couple of knights , some horses , a shield or two , and a fancy background . As you build more and more , you realize you have to create a lot more rules . Everything has to be defined . Suddenly there are a lot of rules and a lot of objects you have to keep track of . That 's a lot of thinking you have to do ! So you have an idea . You realize that you do n't really care if the cloud you drew up in the sky bumps into a tree and bounces the right way , right ? It 's a waste of time to keep checking to make sure the cloud follows the rules about bouncing the right way , so you decide to take away the rule about clouds bouncing off objects . Now you do n't have to worry about tracking the clouds , and you can focus on drawing other things and making sure everything else is following the rules you wrote . That 's an oversimplification , but that 's pretty much why hit detection is n't always done for all objects in games ; devoting resources to hit detection takes computational resources and may not be worth it . A computer does n't just \" know \" when two objects collide . If you 've got a sword with very complex geometry , and another sword with complex geometry , it takes a lot of math to determine if any part of either sword is touching any other part of the other sword . In many instances , those kind of calculations have to be done for every object in every frame . In your example ( the gun through the vest ) , it would take a lot of math to not only determine where your gun and vest were colliding , but also to calculate where the objects should be relative to each other . There is probably a hit box ( the geometric shape that is tracked for hit detection ) around the player and the gun , but it probably does n't include all of the details of the vest , because that intricate geometry would be hard to track .
In real life, when you try to push your hand through a solid object like a table, you can't do it because the molecules in the table are too close together and they push back against your hand, preventing it from going through. In a video game, the characters and objects are made up of lots of tiny squares called \"pixels,\" and it's hard for the computer to keep track of all of them and make sure they don't go through each other. It's especially hard when the characters or objects are moving around quickly. That's why sometimes in video games you might see things going through each other - it's just really hard for the computer to keep up and make sure everything looks realistic.
reddit_eli5

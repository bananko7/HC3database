Data Structures , Linked Lists and Binary Trees I have always been confused , although immediately after I close my book , I feel like I have understood . There is always something missing . Explain like I'm five.<>To fully understand some data structures one must have a moderately good understanding of recursion , how it works , and what it means . Put simply , linked lists and binary trees are recursive data structures . This means that they reference themselves in some fashion . * * To understand this post you must have a vague understanding of programming . All code is in pseudocode . * * * * * * * # # # Linked Lists To begin we must define a class ( or structure , depending on the language ) . For most linked list data structures , this class will be called a ` list ` . class list : var value list next So we have defined a class ` list ` which holds two variables : one of type ` integer ` ( i.e. 1 , 4 , 7 ) and one of type ` list ` . The ` var ` \" value \" is the important piece of information about * this * node . The ` list ` \" next \" holds the next object in the linked list . This means that every ` list ` stores a piece of data * * and * * another list . The last ` list ` in the linked list points to the ` NULL ` value , which basically means that the end of the list has been reached . Lists all the way down . Compare a linked lists to an array . Traverse an array and print it 's contents : for i = 0 ; i < len(array ) ; i = i + 1 print array[i ] ; Now with a linked list who 's top ( or head , as it is sometimes called ) is called ` list ` : for i = list ; i.next ! = NULL ; i = i.next ; print i.value ; I like to think that the list looks more recursive : i.e. you can continue to reference ` .next ` until you hit ` NULL ` . This looks simpler and is easier to read , in my opinion . It also makes lists very easy to use in recursive operations . [ A picture from Wikipedia to aid in the understanding of the linked list ] ( URL_1 ) * * * * * # # # Binary Trees Yet again , we must define a class for the binary tree . This is very similar to the linked list , but with a few small changes . This class will be called ` node ` . class node : var value node left node right If you fully understand the example of a linked lists , hopefully the understanding of the binary tree comes fairly easy . In practice , binary trees are often used as binary search trees ( BST ) . BSTs are a fairly efficient and easy to use data structure in sorting and searching . The way a BST works is very nice . Start with your initial ` node ` ( or ` head ` ) , let us say the initial value of which is 8 . Add the next ` node`s to the tree using a simple function called ` insert ` : def insert ( node , value ): if node.value = = NULL node.value = value else if value < node.value insert(node.left , value ) else insert(node.right , value ) Given the ` head ` of a tree with value 8 , one may call ` insert(head , 3 ) ` and a new node will be added to tree . To access it , you would call ` head.left.value ` . With this insert function we can create BSTs fairly easily . Let 's do that now : node head # this is done just to make sure that head is of * type * node head.value = 8 insert(head , 3 ) insert(head , 6 ) insert(head , 10 ) insert(head , 7 ) insert(head , 1 ) insert(head , 4 ) insert(head , 14 ) insert(head , 13 ) [ This is your end result ] ( URL_0 ) * * * * * There are many types of data structures . To name a few that are similar to these : doubly - linked lists , circular lists ( and of course , doubly - linked circular lists ) , graphs , tries , etc . This edge of computer science extends quite far and there are many important algorithms associated with these more complex data structures . If you want to know more , just ask .<>Sure! I'll try to explain data structures, linked lists, and binary trees in a way that is easy to understand. Data structures are ways of organizing and storing data in a computer so that it can be accessed and modified efficiently. There are many different types of data structures, each with its own set of strengths and weaknesses. A linked list is a type of data structure where each element is stored in a separate \"node\" and the nodes are connected together in a chain. The nodes contain the data and a \"pointer\" that points to the next node in the list. Linked lists are useful because they allow you to insert and remove elements from the list quickly and easily. A binary tree is a type of data structure where each element is stored in a \"node\" and the nodes are organized into a tree-like structure. In a binary tree, each node can have up to two children, which are referred to as the \"left\" and \"right\" children. Binary trees are useful because they allow you to search for elements quickly and efficiently. I hope that helps! Let me know if you have any questions.<>reddit_eli5